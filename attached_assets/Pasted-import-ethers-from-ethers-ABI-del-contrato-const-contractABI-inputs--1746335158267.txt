import { ethers } from 'ethers';

// ABI del contrato
const contractABI = [
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "x",
        "type": "string"
      }
    ],
    "name": "set",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "get",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

// Dirección del contrato en Arbitrum Sepolia
const contractAddress = '0xe074123df0616FdB1fD0E5Eb3efefe43D59b218a';

/**
 * Función para establecer un valor en el contrato inteligente
 * @param value - El valor string que se quiere almacenar en el contrato
 * @returns Promise con la transacción
 */
export async function setValueInContract(value: string): Promise<any> {
  // Verifica si existe window.ethereum
  if (!window.ethereum) {
    throw new Error('MetaMask no está instalado. Por favor instala MetaMask para continuar.');
  }

  try {
    // Solicita acceso a las cuentas del usuario
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const userAddress = accounts[0];
    
    // Verifica que estamos en la red correcta (Arbitrum Sepolia)
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    // Chain ID de Arbitrum Sepolia es 0x66eee (421614 en decimal)
    if (chainId !== '0x66eee') {
      throw new Error('Por favor conecta a la red Arbitrum Sepolia');
    }
    
    // Crea un proveedor con window.ethereum
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    
    // Crea una instancia del contrato
    const contract = new ethers.Contract(contractAddress, contractABI, signer);
    
    // Llama al método 'set' del contrato
    const transaction = await contract.set(value);
    
    // Espera a que la transacción sea minada
    const receipt = await transaction.wait();
    
    console.log('Transacción completada:', receipt);
    return receipt;
  } catch (error) {
    console.error('Error al establecer el valor en el contrato:', error);
    throw error;
  }
}

/**
 * Función para obtener el valor actual del contrato (función adicional)
 * @returns Promise con el valor almacenado
 */
export async function getValueFromContract(): Promise<string> {
  if (!window.ethereum) {
    throw new Error('MetaMask no está instalado. Por favor instala MetaMask para continuar.');
  }

  try {
    // Crea un proveedor
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    
    // Crea una instancia del contrato (solo lectura en este caso)
    const contract = new ethers.Contract(contractAddress, contractABI, provider);
    
    // Llama al método 'get' del contrato
    const value = await contract.get();
    
    console.log('Valor obtenido:', value);
    return value;
  } catch (error) {
    console.error('Error al obtener el valor del contrato:', error);
    throw error;
  }
}