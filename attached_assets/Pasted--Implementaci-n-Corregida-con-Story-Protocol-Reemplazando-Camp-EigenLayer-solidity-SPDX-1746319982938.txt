**Implementación Corregida con Story Protocol (Reemplazando Camp/EigenLayer):**

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Import Story Protocol
import "@story-protocol/contracts/interfaces/IIPAssetRegistry.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract DecentralizedStory {
    string public currentStory;
    address public owner;
    IIPAssetRegistry public storyRegistry;
    IERC20 public mxnbToken;
    
    // Story Protocol Contract Address (Sepolia)
    address constant STORY_REGISTRY = 0x2D2D47A1A7c4e82C5678C5C3D5eC9855cD37ef01;
    address constant MXNB_ADDRESS = 0x82B9e52b26A2954E113F94Ff26647754d5a4247D;

    struct Contribution {
        address contributor;
        string content;
        uint256 votes;
        uint256 ipAssetId; // ID del activo IP en Story
    }
    
    Contribution[] public contributions;

    constructor() {
        owner = msg.sender;
        storyRegistry = IIPAssetRegistry(STORY_REGISTRY);
        mxnbToken = IERC20(MXNB_ADDRESS);
    }

    function registerAndSetStory(string memory _story, string memory _ipName) external {
        require(msg.sender == owner, "Solo owner");
        
        // 1. Registrar IP en Story Protocol
        uint256 ipAssetId = storyRegistry.registerIPAsset(
            _ipName,
            1, // Tipo: Texto
            keccak256(bytes(_story)),
            address(this)
        );
        
        // 2. Actualizar historia local
        currentStory = _story;
        
        // 3. Distribuir recompensas MXNB
        _distributeRewards(ipAssetId);
    }

    function _distributeRewards(uint256 _ipAssetId) internal {
        uint256 totalVotes;
        for(uint i = 0; i < contributions.length; i++) {
            totalVotes += contributions[i].votes;
        }
        
        uint256 totalReward = mxnbToken.balanceOf(address(this));
        for(uint i = 0; i < contributions.length; i++) {
            uint256 share = (contributions[i].votes * totalReward) / totalVotes;
            mxnbToken.transfer(contributions[i].contributor, share);
            
            // Registrar contribución en Story Protocol
            storyRegistry.addContribution(
                _ipAssetId,
                contributions[i].contributor,
                contributions[i].content
            );
        }
    }
}
```

**Frontend en Replit (app.js):**

```javascript
// 1. Instalar dependencias
import { ethers } from "ethers";
import { Web3Modal } from "@web3modal/standalone";
import StoryProtocolABI from "./StoryProtocolABI.json";

// 2. Configurar Wallet
const web3Modal = new Web3Modal({
  projectId: "TU_PROJECT_ID_WALLETCONNECT",
  walletConnectVersion: 2
});

// 3. Conectar Wallet
async function connectWallet() {
  const provider = await web3Modal.openModal();
  const web3Provider = new ethers.providers.Web3Provider(provider);
  return web3Provider.getSigner();
}

// 4. Registrar Historia
async function publishStory() {
  const signer = await connectWallet();
  const storyText = await generateTxt(); // Tu función actual
  
  // Instanciar contrato
  const contract = new ethers.Contract(
    "TU_CONTRATO_ADDRESS",
    ["function registerAndSetStory(string,string)"],
    signer
  );
  
  // Generar hash único para el nombre del IP
  const ipName = `Story-${Date.now()}`;
  
  // Ejecutar transacción
  const tx = await contract.registerAndSetStory(storyText, ipName);
  await tx.wait();
  
  // Actualizar UI
  displayStoryFromChain();
}

// 5. Mostrar Historia Registrada
async function displayStoryFromChain() {
  const provider = new ethers.providers.JsonRpcProvider(ARBITRUM_SEPOLIA_RPC);
  const contract = new ethers.Contract("TU_CONTRATO_ADDRESS", ["function currentStory() view returns (string)"], provider);
  
  const story = await contract.currentStory();
  document.getElementById("story-display").innerText = story;
  
  // Verificar en Story Protocol
  const ipAssetId = await getIPAssetId(story);
  displayIPDetails(ipAssetId);
}

// 6. Integrar con Story Protocol
async function getIPAssetId(storyHash) {
  const storyContract = new ethers.Contract(
    STORY_REGISTRY_ADDRESS,
    StoryProtocolABI,
    provider
  );
  
  return storyContract.getIPAssetIdByHash(keccak256(storyHash));
}
```

**Pasos para Implementar:**

1. **Configurar WalletConnect en Replit:**
```bash
npm install @web3modal/standalone @walletconnect/ethereum-provider
```

2. **Variables de Entorno Necesarias:**
```javascript
// Configurar en Secrets de Replit
const ARBITRUM_SEPOLIA_RPC = "https://sepolia-rollup.arbitrum.io/rpc";
const STORY_REGISTRY_ADDRESS = "0x2D2D47A1A7c4e82C5678C5C3D5eC9855cD37ef01";
const MXNB_ADDRESS = "0x82B9e52b26A2954E113F94Ff26647754d5a4247D";
```

3. **Flujo Completo de Usuario:**
- Conectar wallet (MetaMask/Coinbase)
- Escribir contribución en editor de texto
- Publicar (registra en Story Protocol + Arbitrum)
- Ver historia on-chain con verificación IP
- Las votaciones populares actualizan el hash raíz

**Beneficios Clave:**
1. Registro inmutable de cada versión en Story Protocol
2. Trazabilidad completa de contribuciones usando MXNB
3. Compatible con el track de Bitso (MXNB) y Arbitrum
4. Cumple con los requisitos de IP management de Story Protocol

**Mejoras Recomendadas:**
1. Usar IPFS para almacenar versiones completas
```javascript
// Ejemplo de subida a IPFS
import { Web3Storage } from 'web3.storage';
const client = new Web3Storage({ token: 'API_KEY' });
const cid = await client.put([new File([storyText], 'story.txt')]);
```

2. Implementar DAO para gobernanza de historias
3. Añadir módulo de licencias de Story Protocol para monetización

¿Necesitas ayuda con la implementación específica de alguna función o con las pruebas en testnet?

5 Citations

What Is Story Protocol? Transforming IP Management With Blockchain | CoinGecko
https://www.coingecko.com/learn/what-is-story-protocol

Smart Contract Guide - What is Story
https://docs.story.foundation/docs/get-started-with-the-smart-contracts

Introducing the World's IP Blockchain - What is Story
https://docs.story.foundation/docs/what-is-story

Story
https://www.story.foundation/

A Comprehensive Understanding of Story Protocol with Total Financing of 140 Million and How to Participate - ChainCatcher
https://www.chaincatcher.com/en/article/2159149