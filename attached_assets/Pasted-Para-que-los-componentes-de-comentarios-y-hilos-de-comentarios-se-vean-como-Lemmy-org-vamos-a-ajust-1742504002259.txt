Para que los componentes de comentarios y hilos de comentarios se vean como Lemmy.org, vamos a ajustar los estilos CSS específicamente para estos componentes. Vamos a crear o modificar los archivos `comment-form.css` y `comment-thread.css` en el directorio `client/src/components`.

### `client/src/components/comment-form.css`

Este archivo contiene los estilos específicos para el formulario de comentarios.

```css
.comment-form-container {
  display: flex;
  align-items: start;
  gap: 8px;
  margin-bottom: 16px;
}

.comment-form-avatar {
  height: 40px;
  width: 40px;
}

.comment-form-textarea {
  flex: 1;
  background-color: var(--background);
  border: 1px solid var(--border);
  border-radius: 4px;
  padding: 8px;
  font-size: 14px;
  min-height: 80px;
  resize: vertical;
}

.comment-form-button {
  margin-top: 8px;
  background-color: var(--primary);
  color: var(--text-primary);
  border: none;
  border-radius: 4px;
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
}

.comment-form-button:hover {
  background-color: var(--primary-hover);
}

.comment-form-button:disabled {
  background-color: var(--primary-disabled);
  cursor: not-allowed;
}
```

### `client/src/components/comment-thread.css`

Este archivo contiene los estilos específicos para los hilos de comentarios.

```css
.comment-thread-container {
  max-width: 100%;
  overflow-x: auto;
  padding-bottom: 12px;
  scrollbar-width: thin;
}

.comment-thread-main {
  width: max-content;
  min-width: 100%;
}

.comment-replies-container {
  overflow-x: visible;
  width: auto;
  position: relative;
}

.nested-comment {
  position: relative;
  padding-left: 16px;
  min-width: fit-content;
  margin-top: 8px;
}

.nesting-level-0 .nested-comment {
  border-left: 2px solid #3b82f6;
}

.nesting-level-1 .nested-comment {
  border-left: 2px solid #06b6d4;
}

.nesting-level-2 .nested-comment {
  border-left: 2px solid #10b981;
}

.nesting-level-3 .nested-comment {
  border-left: 2px solid #84cc16;
}

.nesting-level-4 .nested-comment {
  border-left: 2px solid #eab308;
}

.nesting-level-5 .nested-comment {
  border-left: 2px solid #f59e0b;
}

.nesting-level-6 .nested-comment {
  border-left: 2px solid #f97316;
}

.nesting-level-7 .nested-comment {
  border-left: 2px solid #ef4444;
}

.nesting-level-8 .nested-comment {
  border-left: 2px solid #ec4899;
}

.nesting-level-9 .nested-comment {
  border-left: 2px solid #d946ef;
}

.nesting-level-10 .nested-comment {
  border-left: 2px solid #8b5cf6;
}

.nesting-level-11 .nested-comment {
  border-left: 2px solid #0ea5e9;
}

.nesting-level-12 .nested-comment {
  border-left: 2px solid #3b82f6;
}

.comment-item {
  font-size: 14px;
  margin-bottom: 8px;
}

.comment-content {
  background-color: var(--background);
  border: 1px solid var(--border);
  border-radius: 4px;
  padding: 8px;
}

.comment-reply-button {
  margin-top: 8px;
  background-color: var(--primary);
  color: var(--text-primary);
  border: none;
  border-radius: 4px;
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
}

.comment-reply-button:hover {
  background-color: var(--primary-hover);
}

.comment-reply-button:disabled {
  background-color: var(--primary-disabled);
  cursor: not-allowed;
}

@media (max-width: 768px) {
  .comment-form-container {
    flex-direction: column;
    align-items: start;
  }

  .comment-form-avatar {
    height: 32px;
    width: 32px;
  }

  .comment-form-textarea {
    min-height: 60px;
  }

  .comment-form-button {
    margin-top: 4px;
  }

  .nested-comment {
    padding-left: 12px;
    margin-top: 4px;
  }

  .comment-content {
    padding: 6px;
  }

  .comment-reply-button {
    padding: 4px 8px;
    font-size: 12px;
  }
}
```

### Ajustar los Componentes `tsx` para Usar los Nuevos Estilos

#### `client/src/components/comment-form.tsx`

```tsx
import { useState } from "react";
import { useAuth } from "@/lib/auth";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import "./comment-form.css"; // Importar el archivo de estilos

interface CommentFormProps {
  postId: number;
  parentId?: number;
  onSuccess?: () => void;
}

export default function CommentForm({ postId, parentId, onSuccess }: CommentFormProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [comment, setComment] = useState("");

  const createCommentMutation = useMutation({
    mutationFn: async () => {
      const res = await apiRequest("POST", "/api/comments", {
        content: comment,
        postId,
        parentId
      });
      return res.json();
    },
    onSuccess: () => {
      setComment("");
      queryClient.invalidateQueries({ queryKey: [`/api/posts/${postId}/comments`] });
      queryClient.invalidateQueries({ queryKey: ["/api/posts"] });
      
      toast({
        title: "Comment posted",
        description: parentId ? "Your reply has been added" : "Your comment has been added"
      });
      
      if (onSuccess) {
        onSuccess();
      }
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to post comment. Please try again.",
        variant: "destructive",
      });
    }
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to comment",
        variant: "destructive",
      });
      return;
    }
    
    if (!comment.trim()) {
      toast({
        title: "Empty comment",
        description: "Please enter a comment",
        variant: "destructive",
      });
      return;
    }
    
    createCommentMutation.mutate();
  };

  if (!user) {
    return (
      <div className="text-center py-2">
        <p className="text-muted-foreground mb-2">Log in to join the conversation</p>
        <Button variant="outline" size="sm" className="mr-2">Log In</Button>
        <Button size="sm">Sign Up</Button>
      </div>
    );
  }

  return (
    <form className="comment-form-container" onSubmit={handleSubmit}>
      <Avatar className="comment-form-avatar">
        <AvatarFallback className="bg-primary/20 text-primary">
          {user.username.substring(0, 2).toUpperCase()}
        </AvatarFallback>
      </Avatar>
      
      <div className="flex-1">
        <Textarea
          className="comment-form-textarea"
          placeholder={parentId ? "Write a reply..." : "Write a comment..."}
          value={comment}
          onChange={(e) => setComment(e.target.value)}
        />
        
        <div className="flex justify-end mt-2">
          <Button 
            type="submit" 
            className="comment-form-button"
            disabled={createCommentMutation.isPending}
          >
            {createCommentMutation.isPending ? "Posting..." : parentId ? "Reply" : "Comment"}
          </Button>
        </div>
      </div>
    </form>
  );
}
```

#### `client/src/components/comment-thread.tsx`

```tsx
import { useState } from "react";
import { useAuth } from "@/lib/auth";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import CommentForm from "./comment-form"; // Asegúrate de importar el componente CommentForm
import "./comment-thread.css"; // Importar el archivo de estilos

interface Comment {
  id: number;
  content: string;
  author: {
    username: string;
  };
  replies: Comment[];
  nestingLevel: number;
}

interface ThreadsProps {
  postId: number;
  comments: Comment[];
}

export default function Threads({ postId, comments }: ThreadsProps) {
  const { user } = useAuth();
  const [showReplyForm, setShowReplyForm] = useState<number | null>(null);

  const handleReply = (commentId: number) => {
    setShowReplyForm(commentId);
  };

  const renderComments = (comments: Comment[], nestingLevel = 0) => {
    return comments.map(comment => (
      <div key={comment.id} className={`comment-item nesting-level-${nestingLevel}`}>
        <div className="flex items-start gap-2">
          <Avatar className="comment-form-avatar">
            <AvatarFallback className="bg-primary/20 text-primary">
              {comment.author.username.substring(0, 2).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          
          <div className="flex-1">
            <div className="comment-content">
              {comment.content}
            </div>
            
            {user && (
              <Button 
                type="button" 
                size="sm" 
                variant="outline" 
                className="comment-reply-button mt-2"
                onClick={() => handleReply(comment.id)}
              >
                Reply
              </Button>
            )}
            
            {showReplyForm === comment.id && (
              <CommentForm 
                postId={postId} 
                parentId={comment.id} 
                onSuccess={() => setShowReplyForm(null)} 
              />
            )}
          </div>
        </div>
        
        {comment.replies.length > 0 && (
          <div className="comment-replies-container ml-4 mt-2">
            {renderComments(comment.replies, nestingLevel + 1)}
          </div>
        )}
      </div>
    ));
  };

  return (
    <div className="comment-thread-container">
      <CommentForm postId={postId} />
      {comments.length > 0 ? (
        <div className="comment-thread-main">
          {renderComments(comments)}
        </div>
      ) : (
        <div className="text-center py-2">
          <p className="text-muted-foreground">No comments yet</p>
        </div>
      )}
    </div>
  );
}
```

### Explicaciones de las Modificaciones

1. **`comment-form.css`**:
   - **`.comment-form-container`**: Define el contenedor del formulario de comentarios con flexbox y un espacio entre elementos.
   - **`.comment-form-avatar`**: Estilos para el avatar del usuario.
   - **`.comment-form-textarea`**: Estilos para el campo de texto del comentario.
   - **`.comment-form-button`**: Estilos para el botón de envío del comentario.
   - **Responsive Design**: Ajustes para dispositivos móviles.

2. **`comment-thread.css`**:
   - **`.comment-thread-container`**: Estilos para el contenedor principal de los hilos de comentarios.
   - **`.comment-thread-main`**: Estilos para el contenedor principal de los comentarios.
   - **`.comment-replies-container`**: Estilos para el contenedor de comentarios anidados.
   - **`.nested-comment`**: Estilos para los comentarios anidados, incluyendo bordes laterales para indicar el nivel de anidación.
   - **`.comment-item`**: Estilos para cada comentario individual.
   - **`.comment-content`**: Estilos para el contenido de cada comentario.
   - **`.comment-reply-button`**: Est